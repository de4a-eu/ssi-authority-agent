openapi: 3.0.0
info:
  title: DE4A Authority Agent
  version: "2.0"
servers:
  - url: 'http://164.8.250.45:8080/de4a-agent/v2'
tags:
   
  - name: DID connection
    description: Operations for managing the DID connections and invitations sent by the Authority Agent.
  - name: verifiable credentials
    description: Operations for managing verifiable credentials on the Data Provider side.
  - name: verifiable presentations
    description: Operations for managing verifiable presentations to be submitted by the student on the Data Consumer side.
  - name: EBSI integration
    description: Operations for retrieving an EBSI-compliant DID generated by the Authority Agent for EBSI/eSSIF integration.
    
paths:
  /get-did-ebsi:
      get:
        tags:
          - EBSI integration
        summary: Retrieve the currently valid EBSI-compliant DID for the Authority Agent instance.
        
        responses:
          '200':
            description: A string value of the currently valid DID:ebsi registered in the EBSI DID Registry.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/DIDEbsi'
          '404':
            description: Empty object
            content:
              application/json:
                schema:
                  type: string
                  example: {}     
  /generate-invitation:
    post:
      tags:
        - DID connection
      summary: Generate DID invitation for establishing a DID communication between the Authority Agent and the student's Edge Agent.
      requestBody:
        description: The user data obtained from the eProcedure Portal.
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UserData'
      responses:
        '200':
          description: The DID invitation JSON value based on which a QR code on the eProcedure Portal should be generated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneratedInvitation'
              example:
                  {
    "invitation": {
        "recipientKeys": [
            "did:key:z6MkpwV4ZgciyeAQFuioy3mxiSpC2tS86SdUruQMJNnUUX98"
        ],
        "@type": "https://didcomm.org/didexchange/1.0/invitation",
        "serviceEndpoint": "http://de4a-dev.informatika.uni-mb.si:8081",
        "@id": "88ed4544-42d0-47dc-8d4b-8fc9f9e17b4f",
        "label": "de4a-aries-agent"
    },
    "alias": "UM",
    "invitation_url": "https://upload.wikimedia.org/wikipedia/commons/5/5a/University_of_Maribor.png"
}
  /did-conn-status/{userId}:
    get:
      tags:
        - DID connection
      summary: An optional endpoint, which can be explicitly called to retrieve the current status of the DID connection between the Authority Agent and the student's Edge Agent. 
      parameters:
          - in: path
            name: userId
            required: true
            schema:
              type: string
            description: The user ID included in the eIDAS minimum dataset for the identificaton of a natural person. The value is obtained from the eProcedure Portal.
      responses:
        '200':
          description: The connection has already been established.
          content:
            application/json:
              schema:
                type: integer
                example: 1
        '300':
          description: The invitation has been generated, but there is still no response from the student.
          content:
            application/json:
              schema:
                type: integer   
                example: 0
        '400':
          description: The invitation has never been generated. 
          content:
            application/json:
              schema:
                type: integer
                example: -1
  /send-vc-offer:
    post:
      tags:
        - verifiable credentials
      summary: Generate and send a VC offer to the student's Edge Agent for the student to accept before sending him/her the diploma evidence as a VC.
      requestBody:
        description:  An object including the user ID obtained from eIDAS minimum dataset for the identificaton of a natural person and the base64-encoded diploma evidence in the canonical XML format, which is to be converted to VC JSON-LD format and digitally signed by using the issuer's DID.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OfferData'
      
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
                example: true
       
        '404':
          description: FAILED
          content:
            application/json:
              schema:
                type: boolean
                example: false      
  
  /check-offer-vc-response/{userId}:
    get:
      tags:
        - verifiable credentials
      summary: An optional endpoint, which can be explicitly called to check the current status of the student's response to the VC (offer) sent by the Authority Agent.
      parameters:
          - in: path
            name: userId
            required: true
            schema:
               type: string
            description: The user ID included in the eIDAS minimum dataset for the identificaton of a natural person. The value is obtained from the Evidence/eProcedure Portal.
      responses:
        '200':
          description: The VC has been accepted by the student.
          content:
            application/json:
              schema:
                type: integer
                example: 5
        '301':                                                      
          description: The VC has been sent to the student, but has not yet been accepted.
          content:
            application/json:
              schema:
                type: integer
                example: 2  
        '302':
          description: The offer has been accepted by the student, but the VC was never sent.
          content:
            application/json:
              schema:
                type: integer
                example: -3 
        '303':
          description: The offer has been accepted by the student.
          content:
            application/json:
              schema:
                type: integer
                example: 1 
        '401':                                                      
          description: The offer has been sent to the student, but has not yet been accepted.
          content:
            application/json:
              schema:
                type: integer
                example: 0  
        '402':
          description: The offer has not been sent to the student.
          content:
            application/json:
              schema:
                type: integer
                example: -1
        '501':
          description: The offer has been rejected by the student.
          content:
            application/json:
              schema:
                type: integer
                example: -2   
        '502':
          description: The VC has been rejected by the student.
          content:
            application/json:
              schema:
                type: integer
                example: -4 
                
 
  /send-vp-request:
    post:
      tags:
        - verifiable presentations
      summary: Request the student to submit a verifiable presentation (VP) in a given format.
      requestBody:
        description:  The data object including the user ID from the eIDAS minimum dataset for the identificaton of a natural person (the value obtained from the eProcedure Portal) and the requested format type of the VP (e.g. UniversityDegreeCentral).
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VPRequestData'
     
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
                example: true
        '404':
          description: FAILED
          content:
            application/json:
              schema:
                type: boolean
                example: false     
   
  /check-request-vp-response/{userId}:
    get:
      tags:
        - verifiable presentations
      summary: An optional endpoint, which can be explicitly called to retrieve the current status of the VP submission (request) for a given user.
      parameters:
          - in: path
            name: userId
            required: true
            schema:
               type: string
            description: The user ID included in the eIDAS minimum dataset for the identificaton of a natural person. The value is obtained from the eProcedure Portal.
      responses:
        '200':
          description: The VP has been received.
          content:
            application/json:
              schema:
                type: integer
                example: 1
        '201':
          description: The VP has been submitted and validated as ''valid''.
          content:
            application/json:
              schema:
                type: integer
                example: 2
        '202':
          description: The VP has been submitted and validated as ''invalid''.
          content:
            application/json:
              schema:
                type: integer
                example: -3
        '301':                                                      
          description: The VP request has been sent to the student, but has not yet been accepted.
          content:
            application/json:
              schema:
                type: integer
                example: 0  
        '401':
          description: The VP request has not been sent to the student.
          content:
            application/json:
              schema:
                type: integer
                example: -1
        '402':
          description: The VP request has been rejected by the student.
          content:
            application/json:
              schema:
                type: integer
                example: -2   
         
  /validate-vp/{userId}:
    post:
      tags:
        - verifiable presentations
      summary: Validate the validity of the submitted verifiable presentation with regards to its schema structure, trusted issuer, eIDAS identification and digital signature.
      parameters:
          - in: path
            name: userId
            required: true
            schema:
              type: string
            description: The user ID of the student.
      requestBody:
        description:  The base64-encoded data object representing the eIDAS minimum dataset for the identificaton of a natural person (the value obtained from the eProcedure Portal).
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidationData'
          
      responses:
        '200':
          description: An object containing the results of the validation of each VP element
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaValidation'
                
        '404':
          description: Empty object
          content:
            application/json:
              schema:
                example: {}     
  /get-vp/{vpName}:
    get:
      tags:
        - verifiable presentations
      summary: Retrieve the contents of the submitted verifiable presentation.
      parameters:
          - in: path
            name: vpName
            required: true
            schema:
               type: string
            description: The name of the verifiable presentation received and stored by the Authority Agent.
      responses:
        '200':
          description: An object representing the contents of the VP.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifiablePresentation'
                
        '404':
          description: Empty object
          content:
            application/json:
              schema:
                example: {}     
         
            
             
components:
  schemas:
    Achieved:
      type: object
      properties:
        id: 
          type: string
          example: "urn:epass:learningAchievement:1"
        title:
          type: string
          example:  "Mestrado em Engenharia Informática e de Computadores"
        wasAwardedBy:
          type: object
          allOf:
            - $ref: '#/components/schemas/WasAwardedBy'
        specifiedBy:
          type: array
          items:
            type: object
            allOf:
              - $ref: '#/components/schemas/SpecifiedBy'
        
        wasDerivedFrom:
          type: array
          items:
            type: object
            allOf:
              - $ref: '#/components/schemas/WasDerivedFrom'
        associatedLearningOpportunity:
          type: string
          example: "urn:epass:learningopportunity:1"
    CredentialSchema:
      type: object
      properties:
        id: 
          type: string
          description: Public URL where the schema description is located.
          example: "http://de4a-dev.informatika.uni-mb.si:9099/de4a-diploma-schema.json"
        type:
          type: string
          example: "JsonSchemaValidator2018"
      
    CredentialSubject:
      type: object
      properties:
            currentFamilyName: 
              type: string
              example: "Alves"
            currentGivenName:
              type: string
              example: "Alice"
            dateOfBirth:
              type: string
              example: "1997-01-01T00:00:00.000Z"
            personIdentifier:
              type: string
              example: "123456789"
            achieved:
              type: array
              items:
                type: object
                allOf:
                  - $ref: '#/components/schemas/Achieved'
                  
    DIDEbsi:
      type: object
      properties:
          did: 
            type: string
            example: "did:ebsi:2rSF5XaL9CTMknFgLVbn1Q5Avu7jWirteaSySKqraVKBAqSa"
            
    GeneratedInvitation:
      type: object
      properties:
        invitation:
          type: object
          allOf:
            - $ref: '#/components/schemas/Invitation'
        alias:
          type: string
          example: "University of Maribor"
        "invitation_url":
          type: string
          example: "https://upload.wikimedia.org/wikipedia/commons/5/5a/University_of_Maribor.png"
    
    Invitation:
      type: object
      properties:
      
        "@id":
          type: string
          example: "357b37a3-90b5-4309-a3ae-4e64d53417b9"
        serviceEndpoint: 
          type: string
          example: "http://de4a-dev.informatika.uni-mb.si:8081"
        recipientKeys: 
          type: array
          items: 
            type: string
            example: "did:key:z6MkjBmXEA3dtiQ4MW4q2fRDLSTQ7krwagswYpL9n13oWYik"
        label: 
          type: string
          example: "de4a-aries-agent"
        "@type":
          type: string
          example: "https://didcomm.org/didexchange/1.0/invitation"
    
    
    OfferData:
      type: object
      properties:
        userId:
            type: string
            description: The user ID included in the eIDAS minimum dataset for the identificaton of a natural person. The value is obtained from the eProcedure Portal.
            example: alice
        evidence:
            type: string
            description: Base64-encoded diploma data in the XML format.
            example: "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHNhOkhpZ2hlckVkdWNhdGlvbkRpcGxvbWEgaWQ9Imh0dHA6Ly90ZW1wdXJpLm9yZyIgeG1sbnM6Y2xtNTQyMTc9InVybjp1bjp1bmVjZTp1bmNlZmFjdDpjb2RlbGlzdDpzcGVjaWZpY2F0aW9uOjU0MjE3OjIwMDEiIHhtbG5zOmNsbTY2NDExPSJ1cm46dW46dW5lY2U6dW5jZWZhY3Q6Y29kZWxpc3Q6c3BlY2lmaWNhdGlvbjo2NjQxMToyMDAxIiB4bWxuczpjbG1JQU5BTUlNRU1lZGlhVHlwZT0idXJuOnVuOnVuZWNlOnVuY2VmYWN0OmNvZGVsaXN0OnNwZWNpZmljYXRpb246SUFOQU1JTUVNZWRpYVR5cGU6MjAwMyIgeG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiIHhtbG5zOmVkY2k9Imh0dHA6Ly9kYXRhLmV1cm9wYS5ldS9ldXJvcGFzcy9tb2RlbC9jcmVkZW50aWFscyMiIHhtbG5zOnAxPSJodHRwOi8vZGF0YS5ldXJvcGEuZXUvZXVyb3Bhc3MvbW9kZWwvY3JlZGVudGlhbHMvdzNjIyIgeG1sbnM6cDI9InVybjpvYXNpczpuYW1lczpzcGVjaWZpY2F0aW9uOnVibDpzY2hlbWE6eHNkOkNvbW1vbkJhc2ljQ29tcG9uZW50cy0yIiB4bWxuczpwMz0idXJuOm9hc2lzOm5hbWVzOnNwZWNpZmljYXRpb246dWJsOnNjaGVtYTp4c2Q6UXVhbGlmaWVkRGF0YXR5cGVzLTIiIHhtbG5zOnNhPSJ1cm46ZXUtZGU0YTp4c2Q6Q2Fub25pY2FsRXZpZGVuY2VUeXBlOjpIaWdoZXJFZHVjYXRpb25FdmlkZW5jZTp2MS4wIiB4bWxuczp1ZHQ9InVybjp1bjp1bmVjZTp1bmNlZmFjdDpkYXRhOnNwZWNpZmljYXRpb246VW5xdWFsaWZpZWREYXRhVHlwZXNTY2hlbWFNb2R1bGU6MiIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOnNjaGVtYUxvY2F0aW9uPSJ1cm46ZXUtZGU0YTp4c2Q6Q2Fub25pY2FsRXZpZGVuY2VUeXBlOjpIaWdoZXJFZHVjYXRpb25FdmlkZW5jZTp2MS4wIFNBLVVDMS0xMy0wNC0yMDIxLnhzZCI+CiAgPGVkY2k6dGl0bGU+CiAgICA8ZWRjaTp0ZXh0IGNvbnRlbnQtdHlwZT0idGV4dC9odG1sIiBsYW5nPSJwdCI+TWVzdHJhZG8gZW0gRW5nZW5oYXJpYSBJbmZvcm3DoXRpY2EgZSBkZSBDb21wdXRhZG9yZXM8L2VkY2k6dGV4dD4KICA8L2VkY2k6dGl0bGU+CiAgPHNhOmRlZ3JlZSBjb250ZW50LXR5cGU9InRleHQvaHRtbCIgbGFuZz0icHQiPk1lc3RyZSBlbSBFbmdlbmhhcmlhIEluZm9ybcOhdGljYSBlIGRlIENvbXB1dGFkb3Jlczwvc2E6ZGVncmVlPgogIDxzYTpjb3VudHJ5Pmh0dHA6Ly9wdWJsaWNhdGlvbnMuZXVyb3BhLmV1L3Jlc291cmNlL2F1dGhvcml0eS9jb3VudHJ5L1BSVDwvc2E6Y291bnRyeT4KICA8c2E6aW5zdGl0dXRpb25OYW1lIGNvbnRlbnQtdHlwZT0idGV4dC9odG1sIiBsYW5nPSJwdCI+SW5zdGl0dXRvIFN1cGVyaW9yIFTDqWNuaWNvPC9zYTppbnN0aXR1dGlvbk5hbWU+CiAgPHNhOnN0dWR5UHJvZ3JhbW1lIGNvbnRlbnQtdHlwZT0idGV4dC9odG1sIiBsYW5nPSJwdCI+TWVzdHJhZG8gZW0gRW5nZW5oYXJpYSBJbmZvcm3DoXRpY2EgZSBkZSBDb21wdXRhZG9yZXM8L3NhOnN0dWR5UHJvZ3JhbW1lPgogIDwhLS08c2E6bWFpbkZpZWxkT2ZTdHVkeT5odHRwOi8vZGF0YS5ldXJvcGEuZXUvc25iL2lzY2VkLWYvMDYxPC9zYTptYWluRmllbGRPZlN0dWR5Pi0tPgogIDxzYTptYWluRmllbGRPZlN0dWR5IHVyaT0iaHR0cDovL2RhdGEuZXVyb3BhLmV1L3NuYi9pc2NlZC1mLzA2MSIvPgogIDwhLS08c2E6bW9kZU9mU3R1ZHk+ZnVsbCB0aW1lPC9zYTptb2RlT2ZTdHVkeT4tLT4KICA8c2E6bW9kZU9mU3R1ZHk+aHR0cDovL2RhdGEuZXVyb3BhLmV1L2V1cm9wYXNzL2xlYXJuaW5nU2NoZWR1bGVUeXBlL2Z1bGxUaW1lPC9zYTptb2RlT2ZTdHVkeT4KICA8IS0tPHNhOm1vbnRoc09mRWR1Y2F0aW9uPjI8L3NhOm1vbnRoc09mRWR1Y2F0aW9uPi0tPgogIDxzYTpkdXJhdGlvbk9mRWR1Y2F0aW9uPlAyWTwvc2E6ZHVyYXRpb25PZkVkdWNhdGlvbj4KICA8c2E6c2NvcGU+MTIwPC9zYTpzY29wZT4KICA8c2E6ZGF0ZU9mSXNzdWU+MjAyMS0wMS0zMTwvc2E6ZGF0ZU9mSXNzdWU+CiAgPCEtLTxzYTpwbGFjZU9mSXNzdWUgY29udGVudC10eXBlPSJ0ZXh0L2h0bWwiIGxhbmc9InB0Ij5MaXNib2EgLSBQb3J0dWdhbDwvc2E6cGxhY2VPZklzc3VlPi0tPgogIDxzYTpwbGFjZU9mSXNzdWU+CiAgICA8ZWRjaTpuYW1lPgogICAgICA8ZWRjaTp0ZXh0IGxhbmc9InB0IiBjb250ZW50LXR5cGU9InRleHQvaHRtbCI+TGlzYm9hIC0gUG9ydHVnYWw8L2VkY2k6dGV4dD4KICAgIDwvZWRjaTpuYW1lPgogIDwvc2E6cGxhY2VPZklzc3VlPgogIDxzYTpob2xkZXJPZkFjaGlldmVtZW50IGlkPSJodHRwOi8vdGVtcHVyaS5vcmciPgogICAgPGVkY2k6bmF0aW9uYWxJZCBzcGF0aWFsSUQ9Imh0dHA6Ly9wdWJsaWNhdGlvbnMuZXVyb3BhLmV1L3Jlc291cmNlL2F1dGhvcml0eS9jb3VudHJ5L1BSVCI+MTIzNDU2Nzg5PC9lZGNpOm5hdGlvbmFsSWQ+CiAgICA8ZWRjaTpnaXZlbk5hbWVzPgogICAgICA8ZWRjaTp0ZXh0IGNvbnRlbnQtdHlwZT0idGV4dC9odG1sIiBsYW5nPSJwdCI+QWxpY2U8L2VkY2k6dGV4dD4KICAgIDwvZWRjaTpnaXZlbk5hbWVzPgogICAgPGVkY2k6ZmFtaWx5TmFtZT4KICAgICAgPGVkY2k6dGV4dCBjb250ZW50LXR5cGU9InRleHQvaHRtbCIgbGFuZz0icHQiPkFsdmVzPC9lZGNpOnRleHQ+CiAgICA8L2VkY2k6ZmFtaWx5TmFtZT4KICAgIDxlZGNpOmRhdGVPZkJpcnRoPjE5OTctMDEtMDE8L2VkY2k6ZGF0ZU9mQmlydGg+CiAgPC9zYTpob2xkZXJPZkFjaGlldmVtZW50Pgo8L3NhOkhpZ2hlckVkdWNhdGlvbkRpcGxvbWE+Cg=="
    
    Proof:
      type: object
      properties:
        created:
          type: string
          example: "2022-05-03T12:10:10.442420778Z"
        jws:
          type: string
          example: "vKuG55qDtqRhvhZRdV8P-JEXkRh55ENre6m-2oZx9J1ECPpp2NmNC-PZ1INbwPrAypH8MhBw"
        proofPurpose:
          type: string
          example: "assertionMethod"
        type:
          type: string
          example: "Ed25519Signature2018"
        verificationMethod:
          type: string
          example: "did:ebsi:zZBL9v9AhqUde1ZryUzogcw#a4f8879be9d04b66a26cffa807de04df"
          
    SchemaValidation:
      type: object
      properties:
          subjectCheck: 
            type: integer
            
            example: 1 
          schemaCheck:
            type: integer
            example: 0
          issuerCheck:
            type: integer
            example: 0
          signatureCheck:
            type: integer
            example: 0
          vpName:
            type: string
            example :  "vp-user-123456" 
            
    SpecifiedBy:
      type: object
      properties:
        id:
          type: string
          example: "urn:epass:qualification:1"
        title:
          type: string
          example: "Mestrado em Engenharia Informática e de Computadores"
        volumeOfLearning:
          type: string
          example: "P2Y"
        iSCEDFCode:
          type: array
          items:
            type: string
            example: "urn:epass:code:123"
        eCTSCreditPoints:
          type: number
          example: 120
          
    UserData:
      type: object
      properties:
        userId: 
          type: string
          description: The user ID included in the eIDAS minimum dataset for the identificaton of a natural person. The value is obtained from the eProcedure Portal.
          example: alice
    ValidationData:
      type: object
      properties:
        eidas: 
          type: string
          description: The base64-encoded EIDASData object value containing eIDAS identification data for a natural person obtained from the eProcedure Portal.
          example: "ewogICAgInBlcnNvbklkZW50aWZpZXIiOiAiMTIzNDU2Nzg5IiwKICAgICJjdXJyZW50R2l2ZW5OYW1lIjogIkFsaWNlIiwKICAgICJjdXJyZW50RmFtaWx5TmFtZSI6ICJBbHZlcyIsCiAgICAiZGF0ZU9mQmlydGgiOiAiMTk5Ny0wMS0wMVQwMDowMDowMC4wMDBaIgp9"
          
    VerifiableCredential:
      type: object
      properties:
        credentialSubject: 
          type: object
          allOf:
            - $ref: '#/components/schemas/CredentialSubject'
        issuanceDate:
          type: string
          example: "2022-05-03T12:10:10.397Z"
        issued:
          type: string
          example: "2021-01-31T00:00:00.000Z"
        validFrom:
          type: string
          example: "2022-05-03T12:10:10.397Z"
        expirationDate:
          type: string
          example: "2023-05-03T12:10:10.397Z"
        id:
          type: string
          example: "http://de4a.eu/credentials/ff7f1798-5162-4f20-9bd7-076b543d69f2"
        proof:
          type: object
          allOf:
            - $ref: '#/components/schemas/Proof'
        type:
          type: array
          items: 
            type: string
          example: [
    "VerifiableCredential",
    "UniversityDegreeCredential"
  ]
        context:
          type: array
          items:
            type: string
          example: [
    "https://www.w3.org/2018/credentials/v1",
    "https://www.w3.org/2018/credentials/examples/v1"
  ]
        issuer: 
          type: string
          example: "did:ebsi:zZBL9v9AhqUde1ZryUzogcw"
        credentialSchema:
          type: object
          allOf:
            - $ref: '#/components/schemas/CredentialSchema'
        
    VerifiablePresentation:
      type: object

      properties:
        "@context": 
          type: array
          items:
            type: string
          example: [
        "https://www.w3.org/2018/credentials/v1", "https://www.w3.org/2018/credentials/examples/v1"]
        id:
          type: string
          example: "urn:uuid:3978344f-8596-4c3a-a978-8fcaba3903c5"
        type:
          type: array
          items:
            type: string
          example: ["VerifiablePresentation", "CredentialManagerPresentation"]
        verifiableCredential:
          type: array
          items:
            type: object
            allOf:
              - $ref: '#/components/schemas/VerifiableCredential'
              
    VPRequestData:
      type: object
      properties:
        userId:
            type: string
            description: The user ID included in the eIDAS minimum dataset for the identificaton of a natural person. The value is obtained from the eProcedure Portal.
            example: alice
        presentationFormat:
              type: string
              description: The requested format of the VP.
              example: "UniversityDegreeCentral"
            
    
    WasAwardedBy:
      type: object
      properties:
        id:
          type: string
          example: "urn:epass:awardingProcess:1"
        awardingBody:
          type: array
          items:
            type: string
            example: "Instituto Superior Técnico"
        awardingDate:
          type: string
          example: "2021-01-31T00:00:00.000Z"
        awardingLocation:
          type: array
          items:
            type: string
            description: Location of the HEI. Important - must append "urn:" to the initial property value.
            example: "urn:Lisboa-Portugal"
            
    
    WasDerivedFrom:
      type: object
      properties:
        id:
          type: string
          example: "urn:epass:assessment:1"
        title:
          type: string
          example: "Overall Diploma Assessment"
        grade:
          type: string
          example: "excellent (10)"
        issuedDate:
          type: string
          example: "2021-01-31"

